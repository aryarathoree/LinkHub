rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isParticipant(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isGroupMember(members) {
      return request.auth.uid in members;
    }

    function hasValidGroupData(groupId) {
      let group = get(/databases/$(database)/documents/groups/$(groupId)).data;
      return group != null && 
             group.members is list && 
             group.type is string;
    }

    function isGroupPublic(groupId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/groups/$(groupId)) &&
        hasValidGroupData(groupId) &&
        get(/databases/$(database)/documents/groups/$(groupId)).data.type == 'public';
    }

    function isGroupCreator(groupId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/groups/$(groupId)) &&
        hasValidGroupData(groupId) &&
        request.auth.uid == get(/databases/$(database)/documents/groups/$(groupId)).data.createdBy;
    }

    function isDMParticipant(dmId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/directMessages/$(dmId)) &&
        get(/databases/$(database)/documents/directMessages/$(dmId)).data.participants.hasAny([request.auth.uid]);
    }

    function isDMCreator(dmId) {
      return isAuthenticated() && request.auth.uid == get(/databases/$(database)/documents/directMessages/$(dmId)).data.createdBy;
    }

    function isValidUserData() {
      return request.resource.data.keys().hasAll(['email', 'displayName', 'lastSeen', 'status']) &&
             request.resource.data.email is string &&
             request.resource.data.displayName is string &&
             request.resource.data.status in ['online', 'offline', 'away'];
    }

    function isValidMessage() {
      return request.resource.data.keys().hasAll(['text', 'senderId', 'timestamp']) &&
             request.resource.data.text is string &&
             request.resource.data.senderId is string &&
             request.resource.data.timestamp is timestamp;
    }

    function isValidChatData() {
      return request.resource.data.keys().hasAll(['participants', 'type']) &&
             request.resource.data.participants is list &&
             request.resource.data.type in ['direct', 'group'];
    }

    // Host profiles
    match /hosts/{hostId} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == hostId;
    }

    // Events
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.hostId;
    }

    // Host profiles
    match /host_profiles/{userEmail} {
      allow read: if true;
      allow create, update: if isAuthenticated();
      allow delete: if isAuthenticated() && 
        resource.data.email == userEmail &&
        request.auth.uid == resource.data.userId;
    }

    // Profiles
    match /profiles/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Users
    match /users/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Direct Messages
    match /directMessages/{messageId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.senderId || 
        request.auth.uid == resource.data.receiverId ||
        request.auth.uid in resource.data.participants
      );
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.senderId ||
        request.auth.uid in request.resource.data.participants
      );
      allow update, delete: if isAuthenticated() && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid in resource.data.participants
      );
    }

    // Direct Messages subcollection
    match /directMessages/{dmId}/messages/{messageId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == get(/databases/$(database)/documents/directMessages/$(dmId)).data.senderId ||
        request.auth.uid == get(/databases/$(database)/documents/directMessages/$(dmId)).data.receiverId ||
        request.auth.uid in get(/databases/$(database)/documents/directMessages/$(dmId)).data.participants
      );
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.senderId ||
        request.auth.uid in get(/databases/$(database)/documents/directMessages/$(dmId)).data.participants
      );
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.senderId;
    }

    // Groups
    match /groups/{groupId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.members;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.members;
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.ownerId;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
        allow create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
        allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.senderId;
      }
      
      match /announcements/{announcementId} {
        allow read: if isAuthenticated();
        
        allow create: if isAuthenticated();
        
        allow update, delete: if isAuthenticated() && (
          resource.data.createdBy == request.auth.uid ||
          request.auth.uid == get(/databases/$(database)/documents/groups/$(groupId)).data.createdBy
        );
      }
    }

    // Work Posts
    match /posted_work/{workId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.postedBy;
    }

    // Hirer Profiles
    match /hirer_profiles/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Freelancer Profiles
    match /freelancer_profiles/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Posted Work
    match /posted_work/{workId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Work Applications
    match /work_applications/{applicationId} {
      allow read: if isAuthenticated() && (
        // Allow freelancer to read their own applications
        resource.data.freelancerId == request.auth.uid ||
        // Allow hirer to read applications for their posted work
        (resource.data.workId != null && 
         exists(/databases/$(database)/documents/posted_work/$(resource.data.workId)) &&
         get(/databases/$(database)/documents/posted_work/$(resource.data.workId)).data.postedBy == request.auth.uid) ||
        // Allow querying by workId for hirers
        (request.query != null && 
         request.query.filters.size() > 0 && 
         request.query.filters[0].field == 'workId' && 
         request.query.filters[0].op == '==' && 
         request.query.filters[0].value is string &&
         exists(/databases/$(database)/documents/posted_work/$(request.query.filters[0].value)) &&
         get(/databases/$(database)/documents/posted_work/$(request.query.filters[0].value)).data.postedBy == request.auth.uid)
      );
      allow create: if isAuthenticated() && 
        request.resource.data.freelancerId == request.auth.uid;
      allow update: if isAuthenticated() && (
        // Allow freelancer to update their own applications
        resource.data.freelancerId == request.auth.uid ||
        // Allow hirer to update applications for their posted work
        (resource.data.workId != null && 
         exists(/databases/$(database)/documents/posted_work/$(resource.data.workId)) &&
         get(/databases/$(database)/documents/posted_work/$(resource.data.workId)).data.postedBy == request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        // Allow freelancer to delete their own applications
        resource.data.freelancerId == request.auth.uid ||
        // Allow hirer to delete applications for their posted work
        (resource.data.workId != null && 
         exists(/databases/$(database)/documents/posted_work/$(resource.data.workId)) &&
         get(/databases/$(database)/documents/posted_work/$(resource.data.workId)).data.postedBy == request.auth.uid)
      );
    }

    // Applications (for backward compatibility)
    match /applications/{applicationId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.freelancerId ||
        request.auth.uid == resource.data.hirerId ||
        (request.query != null && 
         request.query.filters.size() > 0 && 
         request.query.filters[0].field == 'workId' && 
         request.query.filters[0].op == '==' && 
         request.query.filters[0].value is string &&
         exists(/databases/$(database)/documents/posted_work/$(request.query.filters[0].value)) &&
         get(/databases/$(database)/documents/posted_work/$(request.query.filters[0].value)).data.postedBy == request.auth.uid)
      );
      allow create: if isAuthenticated() && 
        request.resource.data.freelancerId == request.auth.uid &&
        request.resource.data.status == 'pending';
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.freelancerId ||
        request.auth.uid == resource.data.hirerId
      );
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.freelancerId &&
        resource.data.status == 'pending';
    }

    // Projects
    match /projects/{projectId} {
      allow read, create, update, delete: if isAuthenticated();
    }

    // Hires
    match /hires/{hireId} {
      allow read, create, update, delete: if isAuthenticated();
    }
    
    // Chats
    match /chats/{chatId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.participants ||
        (request.query != null && 
         request.query.filters.size() > 0 && 
         request.query.filters[0].field == 'participants' && 
         request.query.filters[0].op == 'array-contains' && 
         request.query.filters[0].value == request.auth.uid)
      );
      allow create: if isAuthenticated() && 
        request.resource.data.participants.hasAny([request.auth.uid]) &&
        request.resource.data.keys().hasAll(['participants', 'createdAt', 'lastMessage', 'lastMessageTime']);
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
    }

    // Chat Messages subcollection
    match /chats/{chatId}/messages/{messageId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
      );
      allow create: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
        request.resource.data.senderId == request.auth.uid;
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.senderId;
    }

    // Registrations
    match /registrations/{registrationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['eventId', 'userId', 'timestamp', 'status', 'userName', 'userEmail']) &&
        request.resource.data.userName is string &&
        request.resource.data.userEmail is string;
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/events/$(resource.data.eventId)).data.createdBy == request.auth.uid
      );
    }

    // Calls
    match /calls/{callId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.participants ||
        (request.query != null && 
         request.query.filters.size() > 0 && 
         request.query.filters[0].field == 'status' && 
         request.query.filters[0].op == '==' && 
         request.query.filters[0].value == 'calling' &&
         request.query.filters.size() > 1 &&
         request.query.filters[1].field == 'participants' &&
         request.query.filters[1].op == 'array-contains' &&
         request.query.filters[1].value == request.auth.uid)
      );
      allow create: if isAuthenticated() && 
        request.resource.data.participants.hasAny([request.auth.uid]) &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.participants ||
        request.auth.uid == resource.data.createdBy
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid in resource.data.participants ||
        request.auth.uid == resource.data.createdBy
      );
    }

    // Conversations
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && (
        resource.data.participants.hasAny([request.auth.uid]) ||
        resource.data.createdBy == request.auth.uid
      );
      allow create: if isAuthenticated() && 
        request.resource.data.participants.hasAny([request.auth.uid]);
      allow update: if isAuthenticated() && (
        resource.data.participants.hasAny([request.auth.uid]) ||
        resource.data.createdBy == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        resource.data.participants.hasAny([request.auth.uid]) ||
        resource.data.createdBy == request.auth.uid
      );
      
      match /messages/{messageId} {
        allow read: if isAuthenticated() && (
          get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]) ||
          get(/databases/$(database)/documents/conversations/$(conversationId)).data.createdBy == request.auth.uid
        );
        allow create: if isAuthenticated() && 
          request.resource.data.senderId == request.auth.uid &&
          isValidMessage();
        allow update, delete: if isAuthenticated() && 
          resource.data.senderId == request.auth.uid;
      }
    }
  }
}
